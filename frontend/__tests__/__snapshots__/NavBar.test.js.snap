// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Nav /> renders nav according to if user and if permissions 1`] = `
<div
  data-test="nav"
>
  <nav>
    <Link
      href="/signin"
      key="noUserLink-0"
    >
      <a
        href="/signin"
        onClick={[Function]}
      >
        Sign In
      </a>
    </Link>
    <Link
      href="/signup"
      key="noUserLink-1"
    >
      <a
        href="/signup"
        onClick={[Function]}
      >
        Create Account
      </a>
    </Link>
  </nav>
</div>
`;

exports[`<Nav /> shows extra nav links when user signed in 1`] = `
<div
  data-test="nav"
>
  <nav
    className=".nav-bg"
  >
    <h4
      data-test="nav-username"
    >
      Miss Hilda Fahey
    </h4>
    <Link
      href="/submit"
      key="userLink-0"
    >
      <a
        href="/submit"
        onClick={[Function]}
      >
        Contribute
      </a>
    </Link>
    <Link
      href="/study"
      key="userLink-1"
    >
      <a
        href="/study"
        onClick={[Function]}
      >
        Play
      </a>
    </Link>
    <Link
      href="/review"
      key="userLink-2"
    >
      <a
        href="/review"
        onClick={[Function]}
      >
        Review
      </a>
    </Link>
    <Signout>
      <Mutation
        mutation={
          Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "SIGN_OUT_MUTATION",
                },
                "operation": "mutation",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "alias": undefined,
                      "arguments": Array [],
                      "directives": Array [],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "signout",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "message",
                            },
                            "selectionSet": undefined,
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 70,
              "start": 0,
            },
          }
        }
        refetchQueries={
          Array [
            Object {
              "query": Object {
                "definitions": Array [
                  Object {
                    "directives": Array [],
                    "kind": "OperationDefinition",
                    "name": undefined,
                    "operation": "query",
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "me",
                          },
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "id",
                                },
                                "selectionSet": undefined,
                              },
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "email",
                                },
                                "selectionSet": undefined,
                              },
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "name",
                                },
                                "selectionSet": undefined,
                              },
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "permissions",
                                },
                                "selectionSet": undefined,
                              },
                            ],
                          },
                        },
                      ],
                    },
                    "variableDefinitions": Array [],
                  },
                ],
                "kind": "Document",
                "loc": Object {
                  "end": 80,
                  "start": 0,
                },
              },
            },
          ]
        }
      >
        <Button
          onClick={[Function]}
          tertiary={true}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Button-sc-1f1w3gq-0",
                  "isStatic": false,
                  "lastClassName": "kpEvwZ",
                  "rules": Array [
                    "font-family:",
                    [Function],
                    ";color:white;border-radius:0.5rem;text-transform:uppercase;letter-spacing:1px;transition:.2s ease;&:hover{cursor:pointer;}&:focus{cursor:pointer;outline:",
                    [Function],
                    " auto 3px;}",
                    [Function],
                    " ",
                    [Function],
                    " ",
                    [Function],
                    " ",
                    [Function],
                    " ",
                    [Function],
                    " &.button--sound{font-weight:bolder;text-decoration:line-through;&::after{content:\\"❌\\";padding-left:3px;}",
                    [Function],
                    "}",
                    [Function],
                  ],
                },
                "displayName": "Button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Button-sc-1f1w3gq-0",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[Function]}
            tertiary={true}
          >
            <button
              className="Button-sc-1f1w3gq-0 kpEvwZ"
              onClick={[Function]}
            >
              Sign Out
            </button>
          </StyledComponent>
        </Button>
      </Mutation>
    </Signout>
  </nav>
</div>
`;
